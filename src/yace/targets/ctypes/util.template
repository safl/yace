"""
Utility functions for loading the library

* gen_search_paths(libname)
  * find_library() + pkg-config

* load(libname)

* check_architecture()

Copyright (c) 2023 Simon A. F. Lund <os@safl.dk>
SPDX-License-Identifier: BSD-3-Clause
"""

import ctypes
import ctypes.util
import os
import platform
import subprocess


SHARED_EXT = {
	"linux": "so",
	"windows": "dll",
	"darwin": "dylib",
}


def gen_search_paths(libname):
	"""
	Yields search-paths for the shared library with the given 'libname'. It is
	an extension of ``ctypes.util.find_library()`` using ``pkg-config``.
	"""

	path = ctypes.util.find_library(libname)
	if path:
		yield path

	try:
		proc = subprocess.run(
			["pkg-config", libname, "--variable=libdir"],
			check=True,
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE,
		)
		if not proc.returncode:
			ext = SHARED_EXT.get(platform.system().lower(), "so")

			yield os.path.join(
				proc.stdout.decode("utf-8").strip(), f"lib{libname}.{ext}"
			)
	except subprocess.CalledProcessError:
		pass


def load(libname):
	"""Dynamically load the shared library named 'libname'"""

	for spath in gen_search_paths(libname):
		try:
			lib = ctypes.CDLL(spath)
			if lib:
				return lib
		except OSError:
			continue

	return None


def check_architecture():
	if (
	{%- for member in ["c_short", "c_int", "c_float", "c_long", "c_longlong", "c_double"] %}
		{{ "" if loop.first else "or" }} ctypes.sizeof(ctypes.{{member}}) == {{ member | sizeof }}
	{%- endfor %}
	):
		print("FAILED: Wrong architecture; Python binding source architecture does not match target architecture.")
		exit(1)

